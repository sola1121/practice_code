C语言中的关键字

void
const , volatile
signed , unsigned
char , int , short , long , float , double , _bool , _Complex, _Imaginary
struct , union , enum
typedef
sizeof
auto , static, register, extern
if , else , switch, case, default
do , while, for, goto
break , continue
return
inline
restrict

===============================================================================

1. 标识符
    标识符可以由字母,数字,下划线组成. 标识符必须以字母或下划线开头, 大小写的字母分别认为使两个不同的字符. 
    不同的系统对标识符的字符数由不同的规定, 一般允许7个字符.

2. 常量
    1) 整形常量
        十进制常数
        八进制常数(以0开头的数字序列)
        十六进制常数(以0x开头的数字序列)
        长整型常数(在数字后面加字符L或l)

    2) 字符常量
        用'(半角单撇号)括起来的一个字符, 可以使用转义字符

    3) 实型常量(浮点型常量)
        小数形式
        指数形式
    
    4) 字符串常量
        用"(半角双撇号)括起来的字符序列

3. 表达式
    1) 算数表达式
        整形表达式 : 参加运算的运算量使整型量, 结果也是整型数
        实型表达式 : 参加运算的运算量使实型量, 运算过程中先转换为double型, 结果为double型

    2) 逻辑表达式
        用逻辑运算符连接的整型量, 结果为一个整数(0或1). 逻辑表达式可以认为使整型表达式的一种特殊形式.
    
    3) 字位表达式
        用位运算连接的整型量, 结果为整数. 字位表达式也可以认为使整型表达式的一种特殊形式.

    4) 强制类型转换表达式
        用 (类型) 运算符使表达式的类型进行强制转换, 如 (float) a; 

    5) 逗号表达式(顺序表达式)
        其形式为 : 表达式1, 表达式2, ... ,表达式n;
        顺序求出表达式1, 2, ...到n的值, 结果为表达式n的值
    
    6) 赋值表达式
        将赋值号 = 右侧表达式的值赋给赋值号左边的变量. 赋值表达式的值为执行赋值后被赋值的变量的值.
    
    7) 条件表达式
        其形式为 : 逻辑表达式 ? 表达式1 : 表达式2
        逻辑表达式的值若为非0, 则条件表示的值等于表达式1的值. 若罗家表达式的值为0, 则条件表达式的值等于表达式2的值.

    8) 指针表达式
        对指针类型的数据进行运算, 如 p-2, p1-p2等(其中p, p1, p2均已定义为指向数组的指针变量, p1与p2指向同意数组中的元素), 结果为指针类型.

    以上各种表达式可以包含有关的运算符, 也可以是不包含任何运算符的初等量, 如 常数使算数表达式的最简单的形式.

4. 数据定义
    对程序中用到的所有变量都需要进行定义. 对数据要定义其数据类型, 需要时要指定其存储类别.

    1) 类型标识符可用
        无符号型 : unsigned
        char, short , int , long, long long
        float, double
        结构体 : struct
        共用体 : union
        枚举类型 : enum
        typedef 定义类型名

        结构体使用
            struct 结构体名 {
                成员1;
                成员2;
                ...
                成员n;
            } 变量列表;

        共用体使用
            union 共用体名 {
                成员1;
                成员2;
                ...
                成员n;
            } 变量列表;
        整个共用体使用字节数与其最大成员使用的字节数相同

        以上变量列表可以不用写, 待之后再来声明变量.

        枚举类型使用
            enum 枚举名 {枚举元素列表};
            不声明有名字的枚举类型
            enum {枚举元素列表} 枚举变量;

        typedef 定义新类型名
            按定义变量的方式, 把变量名换上新类型名, 并且在最前面加typedef, 就声明了新类型名代表原来的类型.
            typedef 已有类型 定义型类型;
            如 
                typedef int COUNT[10];
                typedef char* String;
        
    2) 存储类别可用
        定义在内存中的存放位置, 由此决定了变量的保留时间和变量的作用范围. 可分为动态存储区: 用时分配, 保留到使用结束. 静态存储区: 编译时分配, 保留到运行结束.
        auto
            函数中的局部变量, 如不专门声明为 static 存储类别, 都是动态地分配存储空间的, 数据存储在 动态存储区 中. 
            函数中的形参和在函数中定义的变量(包括在复合语句中定义的变量)都属此类, 在调用该函数时系统会给它们分配存储空间, 在函数调用结束时就自动释放这些存储空间. 
        static
            有时希望函数中的局部变量的值在函数调用结束后不消失而保留原值, 这时就应该指定局部变量为 静态局部变量,
        register
            为提高效率, C语言允许将局部变量的值存放在 CPU 的寄存器中, 这种变量叫做寄存器变量. 
            使用寄存器变量需要注意以下几点: 
                (1)只有局部自动变量和形式参数可以作为寄存器变量.
                (2)一个计算机系统中的寄存器数目有限,不能定义任意多个寄存器变量.
                (3)不能使用取地址运算符“&”求寄存器变量的地址.
        extern
            外部变量(即全局变量)是在函数的外部定义的, 它的作用域为从变量定义处开始, 到本程序文件的末尾. 
            如果外部变量不在文件的开头定义, 其有效的作用范围只限于定义处到文件末尾. 
            如果在定义点之前的函数想引用该外部变量, 则应该在引用之前用关键字 extern 对该变量进行“外部变量声明”. 表示该变量是一个已经定义的外部变量. 
            有了此声明, 就可以从“声明”处起,合法地使用该外部变量. 用 extern 声明外部变量,扩展程序文件中的作用域.

        使用
            存储类别 数据类型 变量列表;
            如 static float a, b, c;

        注意外部数据定义只能用extern或static, 而不能用auto或register

        如果在定义局部变量时不赋初值的话, 则对静态局部变量来说. 

5. 函数形式
    其形式为
        存储类别 数据类型 函数名(形参列表){
            函数体
        }
    
    函数的存储类别只能用extern或static(默认).

    如
        static int max(int x, int y){
            int z;
            z = x>y ? x : y;
            return z;
        }

6. 变量的初始化
    可以在定义时对变量或数组指定初始值.
    静态变量或外部变量如未初始化, 编译时自动赋初值0(对数值型变量)或空字符(对字符变量). 
    自动变量或寄存器变量, 若为初始化, 则其处置为一个不可预测的数据.

7. 语句
    1) 表达式语句
    2) 函数调用语句
    3) 控制语句
        (1) 判断控制
            if (表达式) 语句
            或
            if (表达式) 语句1
            else 语句2
            或
            if (表达式1) 语句1
            else if (表达式2) 语句2
            ...
            else 语句

            switch (表达式){
                case 常量表达式1: 语句1;
                case 常量表达式2: 语句2;
                ...
                case 常量表达式n: 语句n;
                default: 
            }
            前缀case和default本身并不改变控制流程, 他们只是起标号作用, 在执行上一个case所标志的语句后, 继续顺序指向下一个case前缀所标志的语句. 
            若上一个语句中最后用break语句使控制转出switch结构, 那么会switch会从满足条件处一直向下顺序执行完整个switch语句块.

        (2) 循环控制
            while(表达式) 语句

            do 语句 
            while (表达式);

            for (声明表达式; 判断表达式; 执行表达式) 语句

        (3) break 语句
        (4) continue 语句
        (5) return 语句
        (6) goto 语句

    4) 复合语句
    5) 空语句

8. 预处理指令

    # define 宏名 字符串
    # define 宏名(参数1, 参数2, ..., 参数n) 字符串
    # undef 宏名

    # include "文件路径" 或 # include <标准库名>

    # if 常量表达式
    # ifdef 宏名
    # ifndef 宏名
    # else
    # endif

补充
    const 类型修饰符 (常量)
        其修饰的变量值不能被改变, 在整个作用域中都保持固定.
        如
            const int num = 1;
            int const num = 1;
        
        应用于指针
            可以限制指针变量本身, 也可以限制指针指向的数据.
            (*p)是常量, 也就是p指向的内容是常量, 即不能通过(*指针)更改内容, *p1 ++ , *p2 = 2这样不行
            const int * p1;   // 等同 const int (*p1);
            int const * p2;   // 等同 int const (*p1);

            指针本身是常量, 指针只读, 指针本身不能修改, p3 ++ , p3 = p2这样不行
            int * const p3;

            (*p)和p都是常量, p指向的内容和p自身都不能修改
            const int * const p4;
            int const * const p5;

            const 离变量名近就是用来修饰指针变量的, 离变量名远就是用来修饰指针指向的数据(即指向的变量), 如果近的和远的都有, 那么就同时修饰指针变量以及它指向的数据.

        应用于形参
            在函数形参中, 如果形参是一个指针, 为了防止在函数内部修改指针指向的数据, 就可以用 const 来限制.
            如在系统中, 大多数函数都是使用的 const限制更改原始值的
                int printf ( const char * format, ... );
            这样就不会更改*format, 即format指向的数据不能被更改

    volatile 类型修饰符 (易变)
        用它修饰的变量表示可以被某些编译器未知的因素更改, 比如操作系统, 硬件或者其它线程等. 
        遇到这个关键字声明的变量, 编译器对访问该变量的代码就不再进行优化, 从而可以提供对特殊地址的稳定访问. 就是每次使用该变量的时候都获取一遍值.

        如
            volatile int x = 1;
            int y = x;
            int z = x;
            若没有添加volatile关键字, y与z的赋值之间x没有被用作左值, 那么编译器就会认为x的值并没有发生改变(实际上也没有, 这就是优化).
            从x地址中取出的值会在y被赋值后, 接着用去赋值z. 反应在编译器上, 就是不会生成汇编代码重新从x的内存地址中取值用以赋值.
            现在x添加了volatile修饰符, 告诉编译器这是一个容易发生改变的变量, 让编译器停止优化, 这样, 在对y,z进行赋值时, 编辑器就会每次都从x的内存地址读值. 相应的在汇编上也会有反应.

    restrict 指针限定符 (指针唯一且不变)
        用于限定和约束指针, 并表明指针是访问一个数据对象的唯一且初始的方式. 
        即它告诉编译器, 所有修改该指针所指向内存中内容的操作都必须通过该指针来修改, 而不能通过其它途径(其它变量或指针)来修改.
        这样做的好处是, 能帮助编译器进行更好的优化代码, 生成更有效率的汇编代码. 
        如 
            int * restrict ptr;
        指向的内存单元只能被 ptr 访问到, 任何同样指向这个内存单元的其他指针都是未定义的. 直白点就是无效指针. 
        restrict 的出现是因为 C 语言本身固有的缺陷, C 程序员应当主动地规避这个缺陷, 而编译器也会很配合地优化你的代码.

        总括而言, restrict 是为了告诉编译器额外信息 - 两个指针不指向同一数据, 从而生成更优化的机器码. 比如编译器不会再判断传入的两个参数是否指向同一个地址, 而直接开始运算.
        注意, 编译器是无法自行在编译期检测两个指针是否 alias. 如使用 restrict, 程序员也要遵守契约才能得出正确的代码(指针不能指向相同数据).

    inline 函数内联
        关键字 inline 告诉编译器, 任何地方只要调用内联函数, 就直接把该函数的机器码插入到调用它的地方.
        这样程序执行更有效率, 就好像将内联函数中的语句直接插入到了源代码文件中需要调用该函数的地方一样.
        如
            inline void swapf( float *p1, float *p2 ){
                float tmp = *p1; *p1 = *p2; *p2 = tmp;
            }

运算符和结合性

优先级1, 左→右
    () : 圆括号
    [] : 下标运算符
    -> : 指向结构体成员运算符
    .  : 结构体成员运算符

优先级2, 左←右, 单目运算符
    !  : 逻辑非
    ~  : 按位反
    ++ : 自增
    -- : 自减
    -  : 负号
    (类型) : 类型强制转换
    *  : 指针运算符
    &  : 取地址运算符
    sizeof : 长度运算符

优先级3, 左→右, 双目运算符
    *  : 乘
    /  : 除
    %  : 取余

优先级4, 左→右, 双目运算符
    +  : 加
    -  : 减

优先级5, 左→右, 双目运算符
    << : 左移运算符
    >> : 右移运算符

优先级6, 左→右, 双目运算符
    <  : 小于
    <= : 小于等于
    >  : 大于
    >= : 大于等于

优先级7, 左→右, 双目运算符
    == : 相等于
    != : 不相等

优先级8, 左→右, 双目运算符
    &  : 按位与

优先级9, 左→右, 双目运算符
    ^  : 按位异或

优先级10, 左→右, 双目运算符
    |  : 按位或

优先级11, 左→右, 双目运算符
    && : 逻辑与

优先级12, 左→右, 双目运算符
    || : 逻辑或

优先级13, 左←右, 三目运算符
    ?: : 条件运算符

优先级14, 左←右, 双目运算符
    =  : 赋值
    *= : 乘后赋值
    /= : 除后赋值
    %= : 取余后赋值
    += : 加后赋值
    -= : 减后赋值
    <<= : 左移后赋值
    >>= : 右移后赋值
    &=  : 按位与后赋值
    ^=  : 按位异或后赋值
    |=  : 按位或后赋值

优先级15, 左→右
    ,  : 顺序求值运算符