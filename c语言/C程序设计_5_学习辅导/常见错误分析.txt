C 编译程序对语法的检查不如其他高级语言那样严格, 往往得由程序设计者自己设法保证程序的正确性

下面列出一些常见的错误

1. 忘记定义变量
    C 要求对程序中用到的每一个变量都必须定义其类型

2. 输入输出的数据类型与用户指定的输入输出格式声明不一样.
    如
        int a = 6;
        float b = 4.5;
        printf("%d, %f\n", b, a);   // 格式化字符与变量本身的类型不匹配
    高版本的编译器会发出警告但会正常输出, 低版本的输出意想不到的结果, 有的也会报错

3. 未注意数字类型数据的取值范围
    char 一般一个字节 -2⁷ ~ 2⁷ 即 -128~127
    short 一般两个字节 -2¹⁵ ~ 2¹⁵-1 即 -32768 ~ 32767
    int 一般四个字节 -2³¹ ~ 2³¹-1 即 -2147483648 ~ 2147483647
    long long 一般八个字节 -2⁶³ ~ 2⁶³-1
    float 一般四个字节 1.175494e-38    3.402823e+38(精确到6位小数)
    double 一般八个字节 2.225074e-308   1.797693e+308（精确到15位小数）
    long double	 一般十二个字节  3.952525e-323   5.928788e-323(精确到18位小数)
    可以在limits.h标准库中查找

4. 在使用scanf时, 忘记用变量的地址符&
    其他语言在输入时只需写出变量名即可, 而C语言要求指明 向哪个地址所标识的单元送值

5. 输入数据的形式与要求不符
    用scanf 函数输入数据, 应注意如何组织输入数据

6. 在用scanf 函数向字符数组输入数据时, 在数组名前多加了&
    如
        char array[32];
        scanf("%s", &array);   // 错误
    在对变量输入数据时应当加&, 比如变量variable, &variable就表示其地址, 告诉函数 数据送到这个地址去,放在其标志的存储单元中
    而数组名本身就是第一个元素的地址, 在加上&就是画蛇添足
        scanf("%s", array);   // 正确

7. 在用scanf 函数向数值型数组输入数据时, 用数值型数组名
    如
        int numbers[32];
        scanf("%d", numbers);   // 错误
    对字符数组, 可以在scanf 函数中通过格式字符%s和数组名输入一个字符串, 但对数值型数组就不行
    因为输入的不是一个数据, 而是多个数据, 必须分别通过指定数组元素输入
        for(int i=0; i<32; i++)
            scanf("%d", numbers[i]);   // 正确

8. 语句后漏分号
    可能造成编译不通过, 或者结果混乱, 是人总会忘. 所以在之后的语言中, 都取消了分号表示一个语句这一设计, 而由词法分析器来判断一个语句

9. 将预处理指令当作C语句, 在行末加了分号
    #include #define #if #ifdef #ifndef 等这些指令不是C语言编译器处理的代码, 而是由预编译器使用的指令

10. 在不该加分号的地方加了分号
    如
        if (x>y);
            printf("%s", "x大于y");
    本意是判断x,y的大小并输出结论, 由于在if(x>y)后加了分号, if语句到分号结束. 即当x>y为真时, 执行一个空语句
    接下来就会执行printf语句, 因为这个printf不属于if语句块, 所以x>y还是x<=y, 其都会执行. 会造成困扰

11. 对应该有花括号的复合语句, 忘记加花括号
    如
        while(i>0)
            sum += i;
            i--;
    不加花括号表示一个语句块, while默认只执行下一个语句, 所以这里的 while 可能会一直执行, 造成错误

12. 括号不对
    比如左右括号没配齐

13. 在用标识符时, 混淆了大小写字母的区别
    C语言区分大小写字母

14. 误把 = (赋值运算符) 作为 == (等于关系运算符)
    如
        if(num=100) do_something(&num);
    num将会被赋值为100, 并交由if判断, 100在这里是非零(True), 无论如何都会执行if后的下一个语句

15. 引用数组元素时误用了圆括号
    C语言中对数组的定义或引用数组元素时必须用方括号

16. 在定义数组时, 将定义的元素个数误认为是可使用的最大下标值
    除Lua等少部分编程语言, 都是从0开始计数的. array[10], 表示有10个元素, 但下标是从0~9, 若引用array[10]就超出范围了
    值得注意的是, 在程序编译时, C编译系统对此并不会报错, 编译能通过, 但运行结果不对

17. 对二维数组或多维数组的定义和引用方法不对
    二维数组和多维数组在定义和引用时必须将每一维的数据分别用方括号括起来. 如matrix[2][2]

18. 误以为数组名代表数组中全部元素
    数组名代表首元素的地址, 是地址常量, 不能被赋值

19. 混淆字符数组和字符指针的区别
    如
        char array[32];
        char * string;
    array是数组名, 代表数组首元素地址. 在编译时对array分配了一段内存单元, 因此在程序运行期间, array是一个常量, 不能再被赋值
        array = "hello, world.";   // 错误, 字符数组名不能再赋值了
    string是指向字符数据的指针变量, 可以指向内存中任意地址的字符串常量, 所以可以在使用中变换所指字符串, 将会将字符串首字母的地址赋与其保存
        string = "hello, world.";  // 正确, 可以指向新建的字符串常量
    
20. 在引用指针变量之前没有对他赋予确定的值
    如
        char * pt;
        puts(pt);   // 有问题, string未被赋值, 内存泄漏
    没有给指针变量string赋值就引用他, 编译时给出警告或中止编译. 其实指针变量pt中不是空的, 而是存放了一个不可预测的值
    pt指向一个地址位pt的存储单元, 而这个存储单元可能是存放了有用数据的, 或者干脆就是系统或别的程序使用内存的关键地址, 对该指针的使用将会变得危险
    初始化是非常重要的, 数值型数据给0, 数组给{0}, 指针给NULL.
        char * pt = NULL;

21. switch语句的各个分支中漏写break语句
    漏写break, 将不会中止于当前case, case将只起到标签的作用, 而不起判断作用, 会执行后面的所有case, 直到遇到break或执行完语句

22. 混淆字符和字符串的表现形式
    如
        char gender = "M";   // 错误, 使用双引号赋值单个字符
    gender是字符变量, 只能存放一个字符. 单个字符常量的形式是使用单引撇号括起来的
    "M"是使用双引号括起来的字符串, 其包含'M'和'\0'两个部分, 无法存放到单个字符变量中

23. 使用自加++和自减--运算符时容易出错误
    优先级2, 左←右, 单目运算符
        !  : 逻辑非
        ~  : 按位反
        ++ : 自增
        -- : 自减
        -  : 负号
        (类型) : 类型强制转换
        *  : 指针运算符
        &  : 取地址运算符
        sizeof : 长度运算符
    如
        int *pt, array[4] = {0, 1, 2, 3};
        pt = array;
        printf("%d\n", *pt++);   // 输出0
    遇到单目左←右, 先看他右边是啥, 如果还是单目左←右, 就再看右边是啥, 从右计算后代入左边
    *pt++ 从右到左运算, 会先自增, 因为是使用后自增, 所以会待指针运算后, 在进行自增, 指向下一个地址
    也可理解是自增减的优先级要略高于指针运算, 会先自增减, 而因为是使用后自增, 所以会待指针运算后, 在进行自增, 指向下一个地址
        pt = array;
        printf("%d\n", *++pt);   // 输出1

24. 忘记对所调用的函数进行函数原型声明
    编译时会出错. 一般将要调用的函数写在main函数之前, 或使用函数原型声明

25. 函数声明与实际定义的函数不匹配
    如
        // 实际定义
        double sum(double x, double y);
        // 之后使用函数声明
        double sum(float, float);

26. 在需要加头文件时没有用#include 指令去包含头文件

27. 误认为函数形参值的改变会影响实参的值
    在python中, 数据都是以对象的形式存在
    不可变的数据类型
        bool, int, float, complex, str, tuple, frozenset, bytes
    可变的数据类型
        list, dict, set, bytearray
    python的赋值是将变量名绑定到内存中创建好的对象上, 对于不可变对象, 传参相当于值传递, 对于可变对象, 传参相当于引用传递
    在C, Go中, 函数传参都是值传递, 如果想要改变原值的数据, 就需要使用指针来引用原数据的地址, 以更改原数据, 当然, 这里的指针也是值传递, 传递的使地址值

28. 函数实参和形参类型不一样
    一般系统在编译时会发出警告, 如果是数值型, 可能会造成精度上的变化, 如果是其他类型, 运行时可能会出错

29. 不同类型的指针混用
    如
        int num1 = 0, *pt1 = NULL;
        double num2 = 0.0, *pt2 = NULL;
        pt1 = &num2;   // pt1 是 int*, num2 是double, 编译不通过
        pt2 = &num1;   // pt2 是 double*, num1 是int, 编译不通过
    编译时会出错.
    指向不同类型的指针间的赋值必须进行类型转换
        pt1 = &num1;
        pt2 = (double *) pt1;
    将int* pt1转换为了 double* pt1, 然后赋值给pt2
    高版本的编译器对于指针间赋值还会自动转换, 如: GUN gcc >= 5.1
    可以直接写成pt2 = pt1
    类型转换在C程序中是常见的, 如使用malloc函数开辟内存单元, 函数返回的是指向被分配内存空间的void* 类型指针
    例
        struct Data{
            unsigned int id;
            char content[1024];
        };
        struct Data text, *pt;
        pt = (struct Data *)malloc(struct Data);   // malloc返回指定大小的内存首地址, 使void *类型, 使用转化为自己要的类型

30. 没有注意系统对函数参数的求值顺序的处理方法
    如
        int i = 1;
        printf("%d, %d, %d\n", i, ++i, ++i);
        i = 1;
        printf("%d, %d, %d\n", i, i++, i++);
    (GUN gcc >= 5.1)输出
        3, 3, 3
        3, 2, 1
    以上go语言中都不给写
    在GUN gcc和mscv中, 函数以左←右的顺序求参数值. 即会先求出最右边一个,然后第二个, 最后是i, 在这之后, 将i的值返给函数
    第一个printf的汇编 (x86-64 GUN gcc 9.3)
        add     DWORD PTR [rbp-4], 1   # 直接加了两次
        add     DWORD PTR [rbp-4], 1
        mov     ecx, DWORD PTR [rbp-4]
        mov     edx, DWORD PTR [rbp-4]
        mov     eax, DWORD PTR [rbp-4]
        mov     esi, eax
        mov     edi, OFFSET FLAT:.LC0
        mov     eax, 0
        call    printf
    先自增, ++i, 在下一个使用前就完成, 所以实际传递给第一个printf 的是完成了两次自增的i
    第二个printf的汇编 (x86-64 GUN gcc 9.3)
        mov     edx, DWORD PTR [rbp-4]
        lea     eax, [rdx+1]             # eax 装入 rdx加1
        mov     DWORD PTR [rbp-4], eax
        mov     eax, DWORD PTR [rbp-4]
        lea     ecx, [rax+1]             # ecx 装入 rax加1
        mov     DWORD PTR [rbp-4], ecx
        mov     esi, DWORD PTR [rbp-4]
        mov     ecx, edx
        mov     edx, eax
        mov     edi, OFFSET FLAT:.LC0
        mov     eax, 0
        call    printf
    后自增, i++, 分别对i++进行计算, 并将算好的值传递给第二个printf
    C标准没有固定函数参数求值的顺序. 不同的C编译器有自己的顺序, 在大多数情况下, 不论从左还是左右计算参数值, 结果都是相同的
    mscv输出似乎不同(没有验证)
    输出
        3, 3, 1
        1, 1, 1
    把所有的参数计算好了之后, 在将其值传递给函数

31. 混淆数组名与指针变量的区别
    数组名代表首元素的地址, 他的值使不能改变的

32. 混淆结构体类型与结构体变量的区别, 对一个结构体类型赋值
    如struct data 算作结构体类型名, 不是变量, 不在内存中占存储单元
    机构体变量是通过结构体类型名声明的变量, 是切实在内存中开辟了空间的, 是变量就可以赋值, 但对于类型, 就不能

33. 使用文件时忘记打开, 或打开方式与使用情况不匹配
    可以通过如下打开文件
        FILE * stream = NULL;
        if(stream = fopen(filepath, "rb")==NULL){
            perror("文件打开失败");
            return 1;
        }
    当然, 上面打开的文件使以rb, read binary 只读 二进制 的方式打开的, 不能用来写

34. 在打开文件时, 指定的文件名找不到

35. 忘记关闭文件, 虽然系统会自动关闭所用文件, 但可能会丢失数据, 因此应该在用完文件后关闭他
    fclose关闭已经开启的FILE * stream, 可以将已在缓存的数据安全的处理后, 退出缓存区