1. 使用背景
    对内存中信息的存取一般以字节位单位, 1byte=8bit. 在实际应用中, 有时存储信息不必用一个或多个字节
    例如
        只表示0(False)或!0(True).
        在计算机longue过程控制, 参数检测或数句通信领域时, 控制信息往往只占一个或几个二进制位, 常常在一个字节中放几个信息

2. 向一个字节中的一个或几个二进制位赋值和改变
    1) 使用位运算
        将一个unsigned short分段, 一共十六位, 让a占2位,b占6位,c占4位,d占4位.
        可以使用一个屏蔽字, 即在需要屏蔽的位上为0, 需要的部分位为1, 和原数进行与运算
        0011111111111111   十进制 16383   65535>>2   同其与,a位变为0,其余保留

        1100000011111111   十进制 49407   ~(63<<8)   同其与,b位变为0,其余保留

        1111111100001111   十进制 65295   ~(15<<4)   同其与,c位变为0,其余保留

        1111111111110000   十进制 65520   65535<<4   同其与,d位变为0,其余保留

    2) 使用位段
        C语言允许在一个结构体中以位(bit)为单位, 指定其成员所占内存长度, 这种以位为单位的成员称为位段或位域.
        格式
            类型名 成员名:宽度;
        或
            类型名 :宽度;

        示例
            struct PackedData {
                unsigned sign:1;
                unsigned value:6;
                int num;
            };
        
        sign和value共占了7个位, 不到一个字节. 之后跟的int类型, 占4个字节, 有8×4=32位, 整个结构体类型会有32+8=40位, 5个字节
        sign和value后面多的一个位闲置不用. num是从另一个字节开始的. 因为内存中每个地址单元都对应着一个字节, 一个字节为 8bit
        根据机器的不同, 分大端模式和小端模式, 即数据的高字节保存在内存的低地址中和按照数据的高字节保存在内存的高地址中. 一般家用计算机是小端模式

        因为char类型一般在系统中就为一个字节, 所以可以使用typedef 将其定义位byte, 以便使用

        sign的值只能给到 1或0, value可以 0~2⁶-1

        注意
            (1) 位段成员的类型可以指定位unsigned int 和 int 型. 宽度应是一个非负整型常量表达式, 且值小于或等于指令类型的长.
            (2) 对位段组, 结构体变量在内存中存放时, 至少占一个存储单元, 即一个机器字, 4个字节, 即使实际长度只占一个字节, 但也分配4个字节.
            (3) 一个位段必须存储在同一个存储单元中, 不能跨两个单元. 如果一个单元空间不能容纳下一个字段, 则空间不够用, 而从下一个单元起存放该段位.
            (4) 可以定义无名位段, 用以跳过指定宽度的位数.
                如
                    struct PackedData {
                        unsigned a:3;
                        unsigned :2;   // 将跳过这两位
                        unsigned b:3;
                    }
                指定无名字符宽度0, 将会直接跳过该字节, 从下一个字节开始
            (5) 位段的长度不能大于存储单元的长度, 也不能定义位段数组. (编译警告, 多了的会被裁去, 只保留能容下的位)
            (6) 可以使用整型格式符输出位段中的数. %d %u %o %x
            (7) 位段可以在数值表达式中引用, 他会被系统自动地转换为整型数.
